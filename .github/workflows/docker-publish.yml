name: Build and Publish Docker Image

on:
  push:
    tags:
    - 'v*'

env:
  # Используйте docker.io для Docker Hub
  REGISTRY: docker.io
  # Имя образа, обновите его на ваше реальное имя репозитория
  IMAGE_NAME: viapip/fireflyiii-aibot

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      # Для создания релиза
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Настройка Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Получение версии из тега
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    # Извлечение метаданных для Docker (тег/версия)
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=raw,value=latest

    # Логин в Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Сборка и публикация Docker образа
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Оптимизации для сборки
        platforms: linux/amd64,linux/arm64
        # Опции сборки
        build-args: |
          NODE_ENV=production
          APP_VERSION=${{ steps.get_version.outputs.VERSION }}

    # Установка Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # Установка зависимостей с использованием yarn
    - name: Install dependencies
      run: |
        corepack enable
        yarn install --immutable

    # Генерация CHANGELOG.md с использованием changelogen
    - name: Generate Changelog
      id: generate_changelog
      run: |
        # Генерация временного changelog для текущего релиза
        yarn changelogen --from $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "") --to HEAD --output CHANGELOG.md

        # Вывод changelog для проверки
        cat CHANGELOG.md

    # Сохранение CHANGELOG.md в репозиторий для истории
    - name: Update CHANGELOG.md in repository
      run: |
        if [ ! -f CHANGELOG.md ]; then
          touch CHANGELOG.md
        fi

        # Временно сохраняем текущий CHANGELOG
        cp CHANGELOG.md CHANGELOG.md.new

        # Получаем содержимое существующего CHANGELOG, если он есть
        if [ -s CHANGELOG.md ]; then
          tail -n +3 CHANGELOG.md > CHANGELOG.md.old
        else
          touch CHANGELOG.md.old
        fi

        # Создаем новый CHANGELOG
        head -n 2 CHANGELOG.md.new > CHANGELOG.md
        cat CHANGELOG.md.old >> CHANGELOG.md
        rm CHANGELOG.md.new CHANGELOG.md.old

    # Создание релиза на GitHub
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
        body_path: ${{ github.workspace }}/CHANGELOG.md
